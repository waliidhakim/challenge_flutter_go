// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/features": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a list of all feature toggles",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "features"
                ],
                "summary": "List features",
                "responses": {
                    "200": {
                        "description": "List of features",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/swaggermodels.FeatureFlippedSwagger"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized if not admin",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error on fetching features",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new feature toggle",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "features"
                ],
                "summary": "Create feature",
                "parameters": [
                    {
                        "description": "Feature to create",
                        "name": "feature",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swaggermodels.FeatureFlippedSwagger"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Feature created",
                        "schema": {
                            "$ref": "#/definitions/swaggermodels.FeatureFlippedSwagger"
                        }
                    },
                    "400": {
                        "description": "Bad request if data is incorrect",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized if not admin",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error on creating feature",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/features/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a specific feature by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "features"
                ],
                "summary": "Get feature",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Feature ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Feature retrieved",
                        "schema": {
                            "$ref": "#/definitions/swaggermodels.FeatureFlippedSwagger"
                        }
                    },
                    "401": {
                        "description": "Unauthorized if not admin",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Feature not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes a specific feature toggle",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "features"
                ],
                "summary": "Delete feature",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Feature ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Feature deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized if not admin",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Feature not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error on deleting feature",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates an existing feature toggle",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "features"
                ],
                "summary": "Update feature",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Feature ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Feature data to update",
                        "name": "feature",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swaggermodels.FeatureFlippedSwagger"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Feature updated",
                        "schema": {
                            "$ref": "#/definitions/swaggermodels.FeatureFlippedSwagger"
                        }
                    },
                    "400": {
                        "description": "Bad request if data is incorrect",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized if not admin",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Feature not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/group-chat": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves group chats associated with the authenticated user or all if admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group-chat"
                ],
                "summary": "Get group chats",
                "responses": {
                    "200": {
                        "description": "List of group chats",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/swaggermodels.GroupChatSwagger"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new group chat with optional image upload",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group-chat"
                ],
                "summary": "Create a group chat",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the group chat",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Activity associated with the group chat",
                        "name": "activity",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Catchphrase of the group chat",
                        "name": "catchPhrase",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Upload image for the group chat",
                        "name": "avatar",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Group chat created successfully",
                        "schema": {
                            "$ref": "#/definitions/swaggermodels.GroupChatSwagger"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Feature not available",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/group-chat/all": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves all group chats from the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group-chat"
                ],
                "summary": "Get all group chats",
                "responses": {
                    "200": {
                        "description": "Complete list of all group chats",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/swaggermodels.GroupChatSwagger"
                            }
                        }
                    }
                }
            }
        },
        "/group-chat/infos/{id}": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates specific information of a group chat by the owner",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group-chat"
                ],
                "summary": "Update group chat information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group Chat ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "New name of the group chat",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "New activity of the group chat",
                        "name": "activity",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "New catchphrase of the group chat",
                        "name": "catchPhrase",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "New image for the group chat",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Group chat information updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Not the owner",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Group chat not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update group chat information",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/group-chat/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves detailed information about a specific group chat, including its members, based on the user's role and permissions.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group-chat"
                ],
                "summary": "Retrieve a specific group chat by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group Chat ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Detailed information of the group chat including members",
                        "schema": {
                            "$ref": "#/definitions/swaggermodels.GroupChatSwagger"
                        }
                    },
                    "401": {
                        "description": "Unauthorized if user ID is not provided or user is not authenticated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden if user is neither an admin nor a member/owner of the group chat",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found if the group chat does not exist",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error if there are database errors",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes a group chat, operation allowed only for the owner",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group-chat"
                ],
                "summary": "Delete group chat",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group Chat ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Group chat deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Not the owner",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Group chat not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates an existing group chat; admin or owner can add new members",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group-chat"
                ],
                "summary": "Update group chat",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group Chat ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Name of the group chat",
                        "name": "name",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Activity associated with the group chat",
                        "name": "activity",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Catchphrase of the group chat",
                        "name": "catchPhrase",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Group chat updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden operation, not an owner/admin",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/logs": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves logs with pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "logs"
                ],
                "summary": "Get logs",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of logs per page",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paginated logs response",
                        "schema": {
                            "$ref": "#/definitions/swaggermodels.LogPaginationResponseSwagger"
                        }
                    },
                    "401": {
                        "description": "Unauthorized if not admin",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error on fetching logs",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/logs/level/{level}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves logs of a specific level with pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "logs"
                ],
                "summary": "Get logs by level",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Log level to filter by",
                        "name": "level",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of logs per page",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paginated logs response filtered by level",
                        "schema": {
                            "$ref": "#/definitions/swaggermodels.LogPaginationResponseSwagger"
                        }
                    },
                    "401": {
                        "description": "Unauthorized if not admin",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error on fetching logs",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/logs/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a specific log by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "logs"
                ],
                "summary": "Get log by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Log ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Detailed log information",
                        "schema": {
                            "$ref": "#/definitions/swaggermodels.LogPaginationResponseSwagger"
                        }
                    },
                    "401": {
                        "description": "Unauthorized if not admin",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Log not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Registers a new user in the system using their phone number and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Register new user",
                "parameters": [
                    {
                        "description": "Registration data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swaggermodels.UserRegisterRequestSwagger"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully registered and user created",
                        "schema": {
                            "$ref": "#/definitions/swaggermodels.UserRegisterResponseSwagger"
                        }
                    },
                    "409": {
                        "description": "User already exists, please login",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error or failed to create user settings",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a list of users with pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get users",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number of the users list",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 3,
                        "description": "Number of users per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/swaggermodels.UserResponseSwagger"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized if the user is not admin",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new user to the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Add new user",
                "parameters": [
                    {
                        "description": "Create user request",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swaggermodels.UserRequestSwagger"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User successfully created",
                        "schema": {
                            "$ref": "#/definitions/swaggermodels.UserResponseSwagger"
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "Logs in a user using their phone number and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swaggermodels.UserLoginRequestSwagger"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully logged in",
                        "schema": {
                            "$ref": "#/definitions/swaggermodels.UserLoginResponseSwagger"
                        }
                    },
                    "400": {
                        "description": "Wrong phone or password",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/with-image": {
            "post": {
                "description": "Registers a new user with additional avatar image",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Add new user with image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "First name of the user",
                        "name": "firstname",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Last name of the user",
                        "name": "lastname",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Username for the new user",
                        "name": "username",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Password for the new user",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Phone number of the user",
                        "name": "phone",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Avatar image file",
                        "name": "avatar",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User successfully created with image",
                        "schema": {
                            "$ref": "#/definitions/swaggermodels.UserRegistrationWithImageResponseSwagger"
                        }
                    },
                    "400": {
                        "description": "Bad request data",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error or failed to upload image",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/user/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a user by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User found and returned",
                        "schema": {
                            "$ref": "#/definitions/swaggermodels.UserResponseSwagger"
                        }
                    },
                    "401": {
                        "description": "Unauthorized if not admin or not the account owner",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a user from the system by user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request if the ID is not provided or invalid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized if the user is not admin or not the account owner",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates user information and optionally uploads a new avatar image",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "First name of the user",
                        "name": "firstname",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Last name of the user",
                        "name": "lastname",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Username for the user",
                        "name": "username",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Password for the user",
                        "name": "password",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Phone number of the user",
                        "name": "phone",
                        "in": "formData"
                    },
                    {
                        "type": "boolean",
                        "description": "Onboarding status",
                        "name": "onboarding",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Avatar image file",
                        "name": "avatar",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated user",
                        "schema": {
                            "$ref": "#/definitions/swaggermodels.UserResponseSwagger"
                        }
                    },
                    "400": {
                        "description": "Bad request data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized if not admin or account owner",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "swaggermodels.FeatureFlippedSwagger": {
            "type": "object",
            "properties": {
                "featureName": {
                    "type": "string",
                    "example": "New UI Feature"
                },
                "isActive": {
                    "type": "boolean"
                }
            }
        },
        "swaggermodels.GroupChatSwagger": {
            "type": "object",
            "properties": {
                "activity": {
                    "type": "string"
                },
                "alert": {
                    "type": "string"
                },
                "alertDate": {
                    "type": "string"
                },
                "catchPhrase": {
                    "type": "string"
                },
                "imageUrl": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "swaggermodels.LogPaginationResponseSwagger": {
            "type": "object",
            "properties": {
                "creationDate": {
                    "type": "string"
                },
                "logLevel": {
                    "type": "string"
                },
                "logMessage": {
                    "type": "string"
                }
            }
        },
        "swaggermodels.UserLoginRequestSwagger": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "example": "s3cret"
                },
                "phone": {
                    "type": "string",
                    "example": "1234567890"
                }
            }
        },
        "swaggermodels.UserLoginResponseSwagger": {
            "type": "object",
            "properties": {
                "onboarding": {
                    "type": "boolean",
                    "example": false
                },
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "userId": {
                    "type": "integer",
                    "example": 1
                },
                "username": {
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "swaggermodels.UserRegisterRequestSwagger": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "example": "s3cr3t"
                },
                "phone": {
                    "type": "string",
                    "example": "1234567890"
                }
            }
        },
        "swaggermodels.UserRegisterResponseSwagger": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "onboarding": {
                    "type": "boolean",
                    "example": true
                },
                "phone": {
                    "type": "string",
                    "example": "1234567890"
                }
            }
        },
        "swaggermodels.UserRegistrationWithImageResponseSwagger": {
            "type": "object",
            "properties": {
                "avatarUrl": {
                    "type": "string",
                    "example": "https://example.com/default.png"
                },
                "firstname": {
                    "type": "string",
                    "example": "John"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "lastname": {
                    "type": "string",
                    "example": "Doe"
                },
                "phone": {
                    "type": "string",
                    "example": "1234567890"
                },
                "role": {
                    "type": "string",
                    "example": "user"
                },
                "username": {
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "swaggermodels.UserRequestSwagger": {
            "type": "object",
            "properties": {
                "firstname": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "swaggermodels.UserResponseSwagger": {
            "type": "object",
            "properties": {
                "avatarUrl": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "lastname": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:4000",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "Swagger Example API",
	Description:      "This is a sample server for a pet store.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
